use crate::db::password_hasher::hash_password;
use crate::models::user_info::UserInfo;
use sqlx::PgPool;

// For inserting users there's not need to specify de id (it's autogenerated)
pub async fn insert_user(
    pool: &PgPool,
    username: &str,
    hashed_password: &str,
    telephone: Option<&str>,
) -> Result<UserInfo, sqlx::Error> {
    let user = sqlx::query_as::<_, UserInfo>(
        r#"
        INSERT INTO users (username, hashed_password, telephone)
        VALUES ($1, $2, $3)
        RETURNING id, username, hashed_password, telephone
        "#,
    )
    .bind(username)
    .bind(hashed_password)
    .bind(telephone)
    .fetch_one(pool)
    .await?;

    Ok(user)
}
