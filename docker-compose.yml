version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4200:4200"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/package.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - /app/node_modules
    environment:
      - NODE_ENV
      - CHOKIDAR_USEPOLLING=true

  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - CARGO_ENV
      - AUTH_DATABASE_URL=postgres://postgres:password@auth-db:5432/psqldb
    networks:
      - backend

  call-service:
    build:
      context: ./backend/call-service
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  group-service:
    build:
      context: ./backend/group-service
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  message-service:
    build:
      context: ./backend/message-service
      dockerfile: Dockerfile
    ports:
      - "3004:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    ports:
      - "3005:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  presence-service:
    build:
      context: ./backend/presence-service
      dockerfile: Dockerfile
    ports:
      - "3006:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    ports:
      - "3007:3000"
    environment:
      - CARGO_ENV
    networks:
      - backend

  auth-db:
    image: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: psqldb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
